name: CI/CD to IBM Code Engine with Secrets Check and Auto Create

on:
  push:
    branches: [main]

env:
  REGION: us-south
  RESOURCE_GROUP: "Agentrix"
  PROJECT_ID: ci-cd-test
  NAMESPACE: ci-cd-test
  BACKEND_IMAGE: us.icr.io/ci-cd-test/backend
  FRONTEND_IMAGE: us.icr.io/ci-cd-test/frontend
  REGISTRY_SECRET_NAME: ci-cd-test

jobs:
  check-secrets-and-validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install detect-secrets and pyyaml
        run: |
          pip install --upgrade "git+https://github.com/ibm/detect-secrets.git@master#egg=detect-secrets"
          pip install pre-commit pyyaml

      - name: Update secrets baseline
        run: |
          detect-secrets scan --update .secrets.baseline --exclude-files 'venv|site-packages|package-lock\.json|\.io$'

      - name: Run validate_agent.py if present
        run: |
          if [ -f validate_agent.py ]; then
            python validate_agent.py
          else
            echo "No validate_agent.py found — skipping"
          fi

  deploy-to-ibm-ce:
    needs: check-secrets-and-validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Podman, JQ, and IBM Cloud CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y podman jq
          curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
          ibmcloud plugin install code-engine container-registry

      - name: IBM Cloud Login and Select Project
        run: |
          ibmcloud login --apikey ${{ secrets.IBMCLOUD_API_KEY }} -r ${{ env.REGION }} -g "${{ env.RESOURCE_GROUP }}"
          ibmcloud cr login
          ibmcloud podman logout us.icr.io
          ibmcloud cr login --client podman
          ibmcloud ce project select --name ${{ env.PROJECT_ID }}

      - name: Ensure Registry Secret Exists
        run: |
          if ! ibmcloud ce registry list | grep -q "^${{ env.REGISTRY_SECRET_NAME }}"; then
            echo "🔧 Creating missing registry secret: ${{ env.REGISTRY_SECRET_NAME }}"
            ibmcloud ce registry-secret create --name ${{ env.REGISTRY_SECRET_NAME }} \
              --server us.icr.io \
              --username iamapikey \
              --password ${{ secrets.IBMCLOUD_API_KEY }}
            echo "⏳ Waiting for secret to propagate..."
            sleep 20
          else
            echo "✅ Registry secret '${{ env.REGISTRY_SECRET_NAME }}' already exists."
          fi

      # ================== BACKEND ==================
      - name: Determine Backend Version Tag
        id: backend-tag
        run: |
          latest_tag=$(ibmcloud cr images ${{ env.BACKEND_IMAGE }} --format json | jq -r '.[].Tag' | grep -E '^v[0-9]+$' | sort -V | tail -n 1)
          if [ -z "$latest_tag" ]; then
            next_tag="v1"
          else
            version_number=$(echo $latest_tag | tr -d 'v')
            next_tag="v$((version_number + 1))"
          fi
          echo "NEXT_BACKEND_TAG=$next_tag" >> $GITHUB_ENV
          echo "Using backend tag: $next_tag"
      

      - name: Build and Push Backend Image
        run: |
          podman build -t ${{ env.BACKEND_IMAGE }}:$NEXT_BACKEND_TAG ./backend
          podman push ${{ env.BACKEND_IMAGE }}:$NEXT_BACKEND_TAG

      - name: Deploy Backend (Create or Update)
        run: |
          if ibmcloud ce app get --name ci-cd-backend > /dev/null 2>&1; then
            ibmcloud ce app update --name ci-cd-backend \
              --image ${{ env.BACKEND_IMAGE }}:$NEXT_BACKEND_TAG \
              --registry-secret ${{ env.REGISTRY_SECRET_NAME }} \
              --cpu 1 --memory 2G --es 2G --min-scale 1 \
              --port 5000 --wait-timeout 300
          else
            ibmcloud ce app create --name ci-cd-backend \
              --image ${{ env.BACKEND_IMAGE }}:$NEXT_BACKEND_TAG \
              --registry-secret ${{ env.REGISTRY_SECRET_NAME }} \
              --cpu 1 --memory 2G --es 2G --min-scale 1 \
              --port 5000 --wait-timeout 300
          fi

      - name: Extract Backend URL
        id: backend-url
        run: |
          BACKEND_URL=$(ibmcloud ce application get --name ci-cd-backend --output json | jq -r '.url')
          echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_ENV
          echo "Backend URL: $BACKEND_URL"

      # ================== FRONTEND ==================
      - name: Determine Frontend Version Tag
        id: frontend-tag
        run: |
          latest_tag=$(ibmcloud cr images ${{ env.FRONTEND_IMAGE }} --format json | jq -r '.[].Tag' | grep -E '^v[0-9]+$' | sort -V | tail -n 1)
          if [ -z "$latest_tag" ]; then
            next_tag="v1"
          else
            version_number=$(echo $latest_tag | tr -d 'v')
            next_tag="v$((version_number + 1))"
          fi
          echo "NEXT_FRONTEND_TAG=$next_tag" >> $GITHUB_ENV
          echo "Using frontend tag: $next_tag"

      - name: Build and Push Frontend Image
        run: |
          podman build -t ${{ env.FRONTEND_IMAGE }}:$NEXT_FRONTEND_TAG \
            --build-arg REACT_APP_BACKEND_URL=$BACKEND_URL \
            ./frontend
          podman push ${{ env.FRONTEND_IMAGE }}:$NEXT_FRONTEND_TAG

      - name: Deploy Frontend (Create or Update)
        run: |
          if ibmcloud ce app get --name ci-cd-frontend > /dev/null 2>&1; then
            ibmcloud ce app update --name ci-cd-frontend \
              --image ${{ env.FRONTEND_IMAGE }}:$NEXT_FRONTEND_TAG \
              --registry-secret ${{ env.REGISTRY_SECRET_NAME }} \
              --cpu 1 --memory 2G --es 2G --min-scale 1 \
              --env "REACT_APP_BACKEND_URL=$BACKEND_URL" \
              --port 8080 --wait-timeout 300
          else
            ibmcloud ce app create --name ci-cd-frontend \
              --image ${{ env.FRONTEND_IMAGE }}:$NEXT_FRONTEND_TAG \
              --registry-secret ${{ env.REGISTRY_SECRET_NAME }} \
              --cpu 1 --memory 2G --es 2G --min-scale 1 \
              --env "REACT_APP_BACKEND_URL=$BACKEND_URL" \
              --port 8080 --wait-timeout 300
          fi

      - name: Output Final Frontend URL
        run: |
          FRONTEND_URL=$(ibmcloud ce application get --name ci-cd-frontend --output json | jq -r '.url')
          echo "✅ Frontend deployed at: $FRONTEND_URL"
